global class VehicleOrderBatch implements Database.Batchable<sObject> {
    
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator([
            SELECT Id, Status__c, Vehicle__c
            FROM Vehicle_Order__c
            WHERE Status__c = 'Pending'
        ]);
    }
    
    global void execute(Database.BatchableContext bc, List<Vehicle_Order__c> orderList) {
        Set<Id> vehicleIds = new Set<Id>();
        
        // Collect vehicle IDs
        for (Vehicle_Order__c order : orderList) {
            if (order.Vehicle__c != null) {
                vehicleIds.add(order.Vehicle__c);
            }
        }
        
        if (!vehicleIds.isEmpty()) {
            // Get vehicle information (simplified - no stock fields for now)
            Map<Id, Vehicle__c> vehicleMap = new Map<Id, Vehicle__c>();
            for (Vehicle__c vehicle : [SELECT Id, Name FROM Vehicle__c WHERE Id IN :vehicleIds]) {
                vehicleMap.put(vehicle.Id, vehicle);
            }
            
            List<Vehicle_Order__c> ordersToUpdate = new List<Vehicle_Order__c>();
            
            // Process each order
            for (Vehicle_Order__c order : orderList) {
                if (vehicleMap.containsKey(order.Vehicle__c)) {
                    // Simply confirm the order (enhance this logic as needed)
                    order.Status__c = 'Confirmed';
                    ordersToUpdate.add(order);
                }
            }
            
            // Update orders
            if (!ordersToUpdate.isEmpty()) {
                try {
                    update ordersToUpdate;
                    System.debug('Updated ' + ordersToUpdate.size() + ' orders to Confirmed status.');
                } catch (Exception e) {
                    System.debug('Error updating orders: ' + e.getMessage());
                }
            }
        }
    }
    
    global void finish(Database.BatchableContext bc) {
        System.debug('Vehicle order batch job completed successfully.');
        
        // Get job details
        AsyncApexJob job = [SELECT Id, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors
                           FROM AsyncApexJob 
                           WHERE Id = :bc.getJobId()];
        
        System.debug('Job Status: ' + job.Status);
        System.debug('Job Items Processed: ' + job.JobItemsProcessed + '/' + job.TotalJobItems);
        System.debug('Errors: ' + job.NumberOfErrors);
    }
}
