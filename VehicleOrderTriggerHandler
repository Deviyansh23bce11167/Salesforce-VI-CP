public class VehicleOrderTriggerHandler {
    
    public static void handleTrigger(List<Vehicle_Order__c> newOrders, Map<Id, Vehicle_Order__c> oldOrders, 
                                   Boolean isBefore, Boolean isAfter, Boolean isInsert, Boolean isUpdate) {
        
        if (isBefore) {
            if (isInsert || isUpdate) {
                preventOrderIfOutOfStock(newOrders);
                validateOrderData(newOrders);
            }
        }
        
        if (isAfter) {
            if (isInsert || isUpdate) {
                updateStockOnOrderPlacement(newOrders, oldOrders, isUpdate);
            }
        }
    }
    
    private static void preventOrderIfOutOfStock(List<Vehicle_Order__c> orders) {
        Set<Id> vehicleIds = new Set<Id>();
        
        for (Vehicle_Order__c order : orders) {
            if (order.Vehicle__c != null) {
                vehicleIds.add(order.Vehicle__c);
            }
        }
        
        if (!vehicleIds.isEmpty()) {
            Map<Id, Vehicle__c> vehicleMap = new Map<Id, Vehicle__c>();
            for (Vehicle__c vehicle : [SELECT Id, Name FROM Vehicle__c WHERE Id IN :vehicleIds]) {
                vehicleMap.put(vehicle.Id, vehicle);
            }
            
            for (Vehicle_Order__c order : orders) {
                if (order.Vehicle__c != null && !vehicleMap.containsKey(order.Vehicle__c)) {
                    order.addError('Selected vehicle does not exist.');
                }
            }
        }
    }
    
    private static void validateOrderData(List<Vehicle_Order__c> orders) {
        for (Vehicle_Order__c order : orders) {
            if (order.Vehicle__c == null) {
                order.addError('Please select a vehicle for this order.');
            }
            
            if (String.isBlank(order.Status__c)) {
                order.Status__c = 'Pending';
            }
        }
    }
    
    private static void updateStockOnOrderPlacement(List<Vehicle_Order__c> newOrders, 
                                                  Map<Id, Vehicle_Order__c> oldOrders, 
                                                  Boolean isUpdate) {
        List<Id> confirmedOrderIds = new List<Id>();
        
        for (Vehicle_Order__c order : newOrders) {
            if (order.Status__c == 'Confirmed') {
                confirmedOrderIds.add(order.Id);
            }
        }
        
        if (!confirmedOrderIds.isEmpty()) {
            System.debug('Orders confirmed: ' + confirmedOrderIds.size());
        }
    }
}
